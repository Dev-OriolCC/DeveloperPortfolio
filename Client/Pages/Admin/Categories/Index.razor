@page "/admin/categories"
@using Client.Components.Admin.Shared

<main class="admin-area-main">
    <Sidebar />

    <div class="container bg-white">
        <h3 class="h2 mt-4 text-center">Categories</h3>
        @* Options to create a form *@
        <hr />
        <a href="/" class="btn btn-success text-dark mb-4 rounded">Create Category</a>
        <button @onclick="() => InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache() " class="btn btn-info text-dark mb-4 rounded">Refresh database</button>

        @* Table to display all categories fetched from the database *@
        @if (InMemoryDatabaseCache.categories.Count != 0)
        {
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Description</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @* Element of table *@
                    @foreach (var category in InMemoryDatabaseCache.categories)
                    {
                        <tr>
                            <th scope="row">@category.Name</th>
                            <td>@category.Description</td>
                            <td><a href="/" class="btn btn-primary rounded">Edit</a></td>
                            <td><button class="btn btn-danger rounded">Delete</button></td>
                        </tr>
                    }
                </tbody>

            </table>
        }
        else
        {
            <p>No categories found!</p>
            <p>Please add a category</p>
        }
    </div>

</main>

@*Implements-IDisposable to work with a database*@

@implements IDisposable
@code 
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    protected override async Task OnInitializedAsync()
    {
        InMemoryDatabaseCache.OnCategoriesDataChanged += StateHasChanged;
        if (InMemoryDatabaseCache.categories == null)
        {
            await InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache();
        }
    }
    //
    public void Dispose() => InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;
}
